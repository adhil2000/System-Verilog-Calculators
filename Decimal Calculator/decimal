`default_nettype none
// Empty top module

module top (
  // I/O ports
  input  logic hz100, reset,
  input  logic [20:0] pb,
  output logic [7:0] left, right,
         ss7, ss6, ss5, ss4, ss3, ss2, ss1, ss0,
  output logic red, green, blue,

  // UART ports
  output logic [7:0] txdata,
  input  logic [7:0] rxdata,
  output logic txclk, rxclk,
  input  logic txready, rxready
);

  // Logic Variables
  logic [31:0] entry;        // value being entered
  logic [31:0] saved;        // saved value to use as a second operand
  logic [4:0] op;            // the selected operation
  logic displaysaved;        // display entry or saved?
  logic equalpressed;        // has equal been pressed?  
  logic [4:0] key;           // outkey of synckey module  
  logic pressed;             // strobe of synckey module
  logic [31:0] nextresult;   // stores the result of an arithmetic operation.
  
  //Lab 11
  logic [31:0] addresult;
  logic [31:0] subresult;
  bcd_add32 m1 (.x(saved), .y(entry), .s(addresult));
  bcd_sub32 m2 (.x(saved), .y(entry), .s(subresult));
  logic [31:0] pos;
  logic [31:0] neg;
  bcd_sub32 m3 (.x(32'b0), .y(pos), .s(neg));
  assign num = (pos[31:28] == 4'd9) ? neg : pos;
  logic [7:0] ss7_tmp;
  assign ss7 = (pos[31:28] == 4'd9) ? 8'b01000000 : ss7_tmp;
  
  
  // Step 1
  logic [31:0] num;
  assign pos = (displaysaved == 1) ? saved : entry; //changed num to pos (lab 11)
  synckey sc (.clk(hz100), .rst(reset), .in(pb[19:0]), .strobe(pressed), .out(key));
  
  // Step 2
  assign nextresult = (op == 0) ? entry : (op == 19) ? (addresult) : (op == 18) ? (subresult) : 0;
  
  always_ff @ (posedge pressed, posedge reset) begin
    if (reset == 1'b1) begin
      entry <= 0; saved <= 0; op <= 0;       
      displaysaved <= 0; equalpressed <= 0;   
    end
    else if ((key == 17) && (displaysaved == 0))
      entry <= (entry >> 4);
    else if (key == 16) begin
      saved <= nextresult; displaysaved <= 1; equalpressed <= 1;
    end
    //else if (key[4] == 1'b0) begin
    else if (key <= 5'd9) begin
      if (equalpressed == 1) begin
        entry <= {28'b0,key[3:0]};
      end
      else if (entry[31:28] == 0) begin
        entry <= (entry << 4) | {28'b0,key[3:0]}; // only change
      end  
      displaysaved <= 0;
    end
    else if (key[4:1] == 4'b1001)begin
      if (equalpressed == 0) begin
        saved <= nextresult;
      end
      op <= key;
      displaysaved <= 1;
      entry <= 0;
      equalpressed <= 0;
    end
  end
  
  ssdec inst_1 (.in(num[3:0]),   .en(1'b1), .out(ss0));
  ssdec inst_2 (.in(num[7:4]),   .en(|num[31:4]), .out(ss1));
  ssdec inst_3 (.in(num[11:8]),  .en(|num[31:8]), .out(ss2));
  ssdec inst_4 (.in(num[15:12]), .en(|num[31:12]), .out(ss3));
  ssdec inst_5 (.in(num[19:16]), .en(|num[31:16]), .out(ss4));
  ssdec inst_6 (.in(num[23:20]), .en(|num[31:20]), .out(ss5));
  ssdec inst_7 (.in(num[27:24]), .en(|num[31:24]), .out(ss6));
  ssdec inst_8 (.in(num[31:28]), .en(|num[31:27]), .out(ss7_tmp));
  
endmodule

// Add more modules down here
module synckey (
input logic clk, rst, input logic [19:0] in, 
output logic strobe, output logic [4:0] out);

  // Two-Flip-Flop Synchronizer
  logic keyclk;
  assign keyclk = | in;
  logic [1:0] delay;
  always_ff @ (posedge clk, posedge rst) begin
    if(rst == 1'b1)
      delay <= 0;
    else
    delay <= (delay << 1) | {1'b0,keyclk};
  end
  assign out[0] = (in[1] | in[3] | in[5] | in[7] | in[9] | in[11] | in[13] | in[15] | in[17] | in[19]); 
  assign out[1] = (in[2] | in[3] | in[6] | in[7] | in[10] | in[11] | in[14] | in[15] | in[18] | in[19]);
  assign out[2] = (in[4] | in[5] | in[6] | in[7] | in[12] | in[13] | in[14] | in[15] );
  assign out[3] = (in[8] | in[9] | in[10] | in[11] | in[12] | in[13] | in[14] | in[15]);
  assign out[4] = (in[16] | in[17] | in[18] | in[19]);
  assign strobe = delay[1];
    
endmodule

module ssdec (
  input logic [3:0] in, 
  input logic en, 
  output logic [7:0] out
);

  logic w,x,y,z;
  
  assign w = in[3];
  assign x = in[2];
  assign y = in[1];
  assign z = in[0];

  logic a,b,c,d,e,f,g;
  assign out[6:0] = {g,f,e,d,c,b,a}; // connect A-G to ss0
  assign out[7] = 0;
  // Your segment decode statements go below.
  assign a = en & (~w & ~x & ~y & ~z) | (~w & ~x & y & ~z) | (~w & ~x & y & z) | (~w & x & ~y & z) | (~w & x & y & ~z) | (~w & x & y & z) | (w & ~x & ~y & ~z) | (w & ~x & ~y & z) | (w & ~x & y & ~z) | (w & x & ~y & ~z) | (w & x & y & ~z) | (w & x & y & z);
  assign b = en & (~w & ~x & ~y & ~z) | (~w & ~x & ~y & z) | (~w & ~x & y & ~z) | (~w & ~x & y & z) | (~w & x & ~y & ~z) | (~w & x & y & z) | (w & ~x & ~y & ~z) | (w & ~x & ~y & z) | (w & ~x & y & ~z) | (w & x & ~y & z);
  assign c = en & (~w & ~x & ~y & ~z) | (~w & ~x & ~y & z) | (~w & ~x & y & z) | (~w & x & ~y & ~z) | (~w & x & ~y & z) | (~w & x & y & ~z) | (~w & x & y & z) | (w & ~x & ~y & ~z) | (w & ~x & ~y & z) | (w & ~x & y & ~z) | (w & ~x & y & z) | (w & x & ~y & z);
  assign d = en & (~w & ~x & ~y & ~z) | (~w & ~x & y & ~z) | (~w & ~x & y & z) | (~w & x & ~y & z) | (~w & x & y & ~z) | (w & ~x & ~y & ~z) | (w & ~x & y & z) | (w & x & ~y & ~z) | (w & x & ~y & z) | (w & x & y & ~z);
  assign e = en & (~w & ~x & ~y & ~z) | (~w & ~x & y & ~z) | (~w & x & y & ~z) | (w & ~x & ~y & ~z) | (w & ~x & y & z) | (w & x & ~y & ~z) | (w & x & ~y & z) | (w & x & y & ~z) | (w & x & y & z) | (w & ~x & y & ~z); 
  assign f = en & (~w & ~x & ~y & ~z) | (~w & x & ~y & ~z) | (~w & x & ~y & z) | (~w & x & y & ~z) | (w & ~x & ~y & ~z) | (w & ~x & ~y & z) | (w & ~x & y & ~z) | (w & x & ~y & ~z) | (w & x & y & ~z) | (w & x & y & z) | (w & ~x & y & z);
  assign g = en & (~w & ~x & y & ~z) | (~w & ~x & y & z) | (~w & x & ~y & ~z) | (~w & x & ~y & z) | (~w & x & y & ~z) | (w & ~x & ~y & ~z) | (w & ~x & ~y & z) | (w & ~x & y & ~z) | (w & ~x & y & z) | (w & x & ~y & z) | (w & x & y & ~z) | (w & x & y & z); 

endmodule

//Lab 11 Prelab
module bcda8 (input logic [7:0] x, y, input logic cin, output logic cout, output logic [7:0] s);

  //logic
  logic cout0;
  //First Instantiation
  bcda4 ua0(.x(x[3:0]), .y(y[3:0]), .cin(cin)  ,.cout(cout0), .s(s[3:0]));
  //Second Instantiation
  bcda4 ua1(.x(x[7:4]), .y(y[7:4]), .cin(cout0), .cout(cout), .s(s[7:4]));   
  
endmodule

module bcda4 (input logic [3:0] x, y, input logic cin, output logic cout, output logic [3:0] s);

  //logic
  logic cout0; 
  logic [3:0] temp_s;
  
  //First Instantiation
  fa4 fa0(.x(x[3:0]), .y(y[3:0]), .cin(cin)  ,.cout(cout0), .s(temp_s[3:0]));    // Least significant bit.
  
  //logic
  logic f;
  logic [3:0] z;
  assign f = cout0 | (temp_s[3] & temp_s[2]) | (temp_s[3] & temp_s[1]);
  assign z = f == 1 ? (4'b0110) : 0;
  assign cout = f == 1 ? 1 : 0;
  
  logic dummy;
  //Second Instantiation
  fa4 fa1(.x(z[3:0]), .y(temp_s[3:0]), .cin(0), .cout(dummy), .s(s[3:0]));   // Most  significant bit.
  

endmodule

// Module fa4
module fa4 (input logic [3:0] x, input logic [3:0] y, input logic cin, output logic cout, output logic [3:0] s);   

   logic cout0; // The carry out bit of fa0, the carry in bit of fa1.
   logic cout1; // The carry out bit of fa1, the carry in bit of fa2.
   logic cout2; // The carry out bit of fa2, the carry in bit of fa3.
	 
   fa fa0(.x(x[0]), .y(y[0]), .cin(cin)  , .cout(cout0), .s(s[0]));    // Least significant bit.
   fa fa1(.x(x[1]), .y(y[1]), .cin(cout0), .cout(cout1), .s(s[1]));
   fa fa2(.x(x[2]), .y(y[2]), .cin(cout1), .cout(cout2), .s(s[2]));
   fa fa3(.x(x[3]), .y(y[3]), .cin(cout2),  .cout(cout), .s(s[3]));    // Most  significant bit. endmodule
endmodule

// Module fa
module fa (input logic x, y, cin, output logic cout, s);

assign s = x ^ y ^ cin;
assign cout = (x * y) + (x * cin) + (y * cin);

endmodule

//Lab 11
module bcd_add32 (input logic [31:0] x, y, output logic [31:0] s);

logic c8;
logic c16;
logic c32;
logic c64;

bcda8 a0(.cout(c8),  .s(s[7:0]),   .x(x[7:0]),   .y(y[7:0]),   .cin(1'b0));
bcda8 a1(.cout(c16), .s(s[15:8]),  .x(x[15:8]),  .y(y[15:8]),  .cin(c8));
bcda8 a2(.cout(c32), .s(s[23:16]), .x(x[23:16]), .y(y[23:16]), .cin(c16));
bcda8 a3(.cout(c64),   .s(s[31:24]), .x(x[31:24]), .y(y[31:24]), .cin(c32));

endmodule

module bcd_sub32 (input logic [31:0] x, y, output logic [31:0] s);

logic c8;
logic c16;
logic c32;
logic c64;

bcda8 a0(.cout(c8), .s(s[7:0]), .x(x[7:0]), .y(8'h99 - y[7:0]), .cin(1'b1));
bcda8 a1(.cout(c16), .s(s[15:8]), .x(x[15:8]), .y(8'h99 - y[15:8]), .cin(c8));
bcda8 a2(.cout(c32), .s(s[23:16]), .x(x[23:16]), .y(8'h99 - y[23:16]), .cin(c16));
bcda8 a3(.cout(c64), .s(s[31:24]), .x(x[31:24]), .y(8'h99 - y[31:24]), .cin(c32));
        
        
endmodule
